#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

void SubBytes(vector<vector<unsigned char>> &state);
void ShiftRows(vector<vector<unsigned char>> &state);
void MixColumns(vector<vector<unsigned char>> &state);
void AddRoundKey(vector<vector<unsigned char>> &state, vector<vector<unsigned char>> roundKey);
void Encrypt(vector<vector<unsigned char>> &state, vector<vector<unsigned char>> roundKey);
void printSquareMatrix(vector<vector<unsigned char>> state);

const unsigned char SBox[16][16] = {
    {99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118},
    {202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192},
    {183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21},
    {4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117},
    {9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132},
    {83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207},
    {208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168},
    {81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210},
    {205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115},
    {96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219},
    {224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121},
    {231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8},
    {186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138},
    {112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158},
    {225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223},
    {140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22},
};

const unsigned char mul2[] = {
    0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
    0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
    0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
    0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
    0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
    0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
    0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
    0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

const unsigned char mul3[] = {
    0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};

const unsigned char MIXCOL[4][4] = {
    {2, 3, 1, 1},
    {1, 2, 3, 1},
    {1, 1, 2, 3},
    {3, 1, 1, 2}
};


int main(){

    const string message = "This will be the";
    const int bits = 128;
    const int cols = 4;
    const int rows = (bits/8)/4;
    vector<vector<unsigned char>> state(rows, vector<unsigned char>(cols));
    vector<vector<unsigned char>> roundKey(rows, vector<unsigned char>(cols));


    //populate 2d vector, state, with message data
    for(int i=0; i<message.length(); i++){
        for(int x=0; x<cols; x++){
            for(int y=0; y<rows; y++){
                state[x][y] = message[y*rows + x];              //populate by column
            }
        }
    }

    roundKey[0][0] = 172;
    roundKey[0][1] = 25;
    roundKey[0][2] = 40;
    roundKey[0][3] = 87;
    roundKey[1][0] = 119;
    roundKey[1][1] = 250;
    roundKey[1][2] = 209;
    roundKey[1][3] = 92;
    roundKey[2][0] = 102;
    roundKey[2][1] = 220;
    roundKey[2][2] = 41;
    roundKey[2][3] = 0;
    roundKey[3][0] = 243;
    roundKey[3][1] = 33;
    roundKey[3][2] = 65;
    roundKey[3][3] = 106;

    cout << "initial: " << endl;
    printSquareMatrix(state);

    Encrypt(state, roundKey);

    cout << "final: " << endl;
    printSquareMatrix(state);

}


void Encrypt(vector<vector<unsigned char>> &state, vector<vector<unsigned char>> roundKey){
    for(int i=0; i<9; i++){                                 //9 rounds for 128 bit AES
        SubBytes(state);
        ShiftRows(state);
        MixColumns(state);
        AddRoundKey(state, roundKey);
    }
    SubBytes(state);                                       //+1 round without MixColumns
    ShiftRows(state);
    AddRoundKey(state, roundKey);
}

void SubBytes(vector<vector<unsigned char>> &state){
    for(int i=0; i<4; i++){
        for(int j=0; j<4; j++){
            int row = (state[i][j] >> (4 * 1)) & 0x000F;       //1st hex digit
            int col = (state[i][j] >> (4 * 0)) & 0x000F;       //2nd hex digit
            state[i][j] = SBox[row][col];
        }
    }
}

void ShiftRows(vector<vector<unsigned char>> &state){
    for(int i=1; i<4; i++){
        rotate(state[i].begin(), state[i].begin()+i, state[i].end());
    }
}

void MixColumns(vector<vector<unsigned char>> &state){
    unsigned char temp[4][4] = {
        {0,0,0,0},
        {0,0,0,0},
        {0,0,0,0},
        {0,0,0,0}
    };

    for(int j=0; j<4; j++){
        temp[0][j] = mul2[state[0][j]] ^ mul3[state[1][j]] ^ state[2][j] ^ state[3][j];
    }
    for(int j=0; j<4; j++){
        temp[1][j] = state[0][j] ^ mul2[state[1][j]] ^ mul3[state[2][j]] ^ state[3][j];
    }
    for(int j=0; j<4; j++){
        temp[2][j] = state[0][j] ^ state[1][j] ^ mul2[state[2][j]] ^ mul3[state[3][j]];
    }
    for(int j=0; j<4; j++){
        temp[3][j] = mul3[state[0][j]] ^ state[1][j] ^ state[2][j] ^ mul2[state[3][j]];
    }

    for(int i=0; i<4; i++){
        for(int j=0; j<4; j++){
            state[i][j] = temp[i][j];
        }
    }
}

void AddRoundKey(vector<vector<unsigned char>> &state, vector<vector<unsigned char>> roundKey){
    for(int i=0; i<4; i++){
        for(int j=0; j<4; j++){
            state[i][j] = state[i][j] ^ roundKey[i][j];
        }
    }
}

void printSquareMatrix(vector<vector<unsigned char>> state){

    int dim = state.size();

    for(int i=0; i<dim; i++){
        for(int j=0; j<dim; j++){
            cout << hex << static_cast<unsigned>(state[i][j]) << ' ';
        }
        cout << endl;
    }
}